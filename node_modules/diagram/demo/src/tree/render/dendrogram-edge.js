const PEM = require('../constant/pem')
const lineColor = require('../constant/edge-color')
module.exports = (n, c, ctx, options, scale) => {
  /*
   * link in d3
   * `
   * M${c.x}     , ${c.y}
   * C${n.x + dx}, ${c.y}
   *  ${n.x + dx}, ${n.y}
   *  ${n.x}     , ${n.y}`
   */
  const beginP = n.getAnchorPoint(n.outAnchor)
  const endP = c.getAnchorPoint(c.inAnchor)
  const beginX = beginP.x
  const beginY = beginP.y
  const endX = endP.x
  const endY = endP.y
  const direction = options.direction || 'LR'
  // const dx = 100
  // const dx = endX - beginX
  // const dy = endY - beginY
  ctx.strokeStyle = lineColor
  ctx.beginPath()
  ctx.moveTo(beginX / scale, beginY / scale)
  if (direction === 'LR') {
    ctx.bezierCurveTo(
      (beginX + PEM) / scale, endY / scale,
      (beginX + PEM) / scale, endY / scale,
      endX / scale, endY / scale
    )
  } else if (direction === 'RL') {
    ctx.bezierCurveTo(
      (beginX - PEM) / scale, endY / scale,
      (beginX - PEM) / scale, endY / scale,
      endX / scale, endY / scale
    )
  } else if (direction === 'TB') {
    ctx.bezierCurveTo(
      endX / scale, (beginY + PEM) / scale,
      endX / scale, (beginY + PEM) / scale,
      endX / scale, endY / scale
    )
  } else if (direction === 'BT') {
    ctx.bezierCurveTo(
      endX / scale, (beginY - PEM) / scale,
      endX / scale, (beginY - PEM) / scale,
      endX / scale, endY / scale
    )
  } else if (direction === 'H') {
    ctx.bezierCurveTo(
      beginX / scale, endY / scale,
      beginX / scale, endY / scale,
      endX / scale, endY / scale
    )
  } else if (direction === 'V') {
    ctx.bezierCurveTo(
      endX / scale, beginY / scale,
      endX / scale, beginY / scale,
      endX / scale, endY / scale
    )
  }
  ctx.stroke()
}
