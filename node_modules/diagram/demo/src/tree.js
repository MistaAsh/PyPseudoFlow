const serialize = require('form-serialize')
const randomTree = require('./util/random-tree')
const hasKey = require('./util/has-key')
// TODO customize drawing methods
const renderCompactBox = require('./tree/render/compact-box')
const renderCommonEdge = require('./tree/render/common-edge')
const renderIndentedEdge = require('./tree/render/indented-edge')
const renderDendrogramEdge = require('./tree/render/dendrogram-edge')
const tmplLayouts = require('./tree/template/layouts')
const tmplDirectionsByLayout = require('./tree/template/directions-by-layout')
const tmplPropsByLayout = require('./tree/template/props-by-layout')
const PEM = require('./tree/constant/pem')

// dom elements
const $layoutProps = document.getElementById('layout-props')
const $layoutType = document.getElementById('layout-type')
const $direction = document.getElementById('direction')
const $propsContainer = document.getElementById('props-container')
const $canvasContainer = document.getElementById('canvas-container')
const $canvas = document.getElementById('canvas')
const $layoutTime = document.getElementById('layout-time')
const $renderTime = document.getElementById('render-time')
$layoutType.innerHTML = tmplLayouts
$layoutType.onchange = renderDirectionsAndProps
$layoutProps.onchange = render
window.onresize = () => {
  setCanvasSize()
  render()
}

// fulfil props
function renderDirectionsAndProps () {
  const layout = $layoutType.value
  $direction.innerHTML = tmplDirectionsByLayout(layout)
  $propsContainer.innerHTML = tmplPropsByLayout(layout)
}
function setCanvasSize () {
  $canvas.width = $canvasContainer.offsetWidth
  $canvas.height = $canvasContainer.offsetHeight
}

const diagram = window.diagram
const ctx = $canvas.getContext('2d')

function getProps () {
  const props = serialize($layoutProps, {
    hash: true
  })
  for (let key in props) {
    const numeric = parseInt(props[key], 10)
    if (!isNaN(numeric)) {
      props[key] = numeric
    }
  }
  return props
}

// render graph
function render () {
  const options = getProps()
  const treeData = randomTree(options.treeSize)
  if (options.layoutType === 'LogicalMindmap') {
    Object.assign(treeData, {
      isRoot: true
    })
  }
  const Layout = diagram.layout[options.layoutType]
  const layout = new Layout(treeData, Object.assign({
    getHeight (d) {
      if (d.isRoot) {
        return PEM * 2.4
      }
      return PEM * 1.2
    },
    getWidth (d) {
      if (d.isRoot) {
        return ctx.measureText(d.name).width * 2 + PEM * 1.6
      }
      return ctx.measureText(d.name).width + PEM * 1.6
    },
    getHGap (d) {
      if (d.isRoot) {
        return (hasKey(options, 'hgap') ? options.hgap : PEM) * 2
      }
      return (hasKey(options, 'hgap') ? options.hgap : PEM) / 2
    },
    getVGap (d) {
      if (d.isRoot) {
        return (hasKey(options, 'vgap') ? options.vgap : PEM) * 2
      }
      return (hasKey(options, 'vgap') ? options.vgap : PEM) / 2
    }
  }, options))

  // console.log(options)

  const t0 = window.performance.now()

  const rootNode = layout.doLayout()

  console.log(rootNode)

  const t1 = window.performance.now()

  setCanvasSize()
  const bb = rootNode.getBoundingBox()
  bb.width += 4 * PEM
  bb.height += 4 * PEM
  rootNode.translate(2 * PEM, 2 * PEM)
  const scale = Math.max(bb.width / $canvas.width, bb.height / $canvas.height)
  $canvas.width = bb.width / scale
  $canvas.height = bb.height / scale

  let renderEdge = renderCommonEdge
  if (options.layoutType === 'Dendrogram') {
    renderEdge = renderDendrogramEdge
  }
  if (options.layoutType === 'IndentedTree') {
    renderEdge = renderIndentedEdge
  }
  if (ctx) {
    ctx.clearRect(0, 0, $canvas.width, $canvas.height)
    rootNode.eachNode(node => {
      node.children.forEach(child => {
        renderEdge(node, child, ctx, options, scale)
      })
      renderCompactBox(node, ctx, scale)
    })
  }

  const t2 = window.performance.now()

  $layoutTime.innerHTML = Math.round(t1 - t0)
  $renderTime.innerHTML = Math.round(t2 - t1)
}

renderDirectionsAndProps()
setCanvasSize()
render()
module.exports = window.diagram
