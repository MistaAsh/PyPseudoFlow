(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["diagram"] = factory();
	else
		root["diagram"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 53);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

const randomInt = __webpack_require__(8);

module.exports = arr => {
    if (!Array.isArray(arr) || !arr.length) {
        return null;
    }
    return arr[randomInt(arr.length - 1)];
};

/***/ }),
/* 1 */,
/* 2 */,
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

const randomInt = __webpack_require__(8);

module.exports = (start, end) => start + randomInt(end - start);

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = '#999';

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = ['CompactBoxTree', 'Dendrogram', 'IndentedTree', 'LayeredTidyTree', 'LogicalMindmap'];

/***/ }),
/* 6 */,
/* 7 */,
/* 8 */
/***/ (function(module, exports) {

module.exports = n => Math.round(Math.random() * n);

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = 18;

/***/ }),
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

const randomTree = __webpack_require__(48);
const utils = __webpack_require__(15);

const res = Object.assign({
    randomTree
}, utils);

module.exports = res;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
    randomCharFromCategories: __webpack_require__(16),
    randomChinese: __webpack_require__(17),
    randomFromArray: __webpack_require__(0),
    randomFromRange: __webpack_require__(3),
    randomInt: __webpack_require__(8),
    randomJapanese: __webpack_require__(18),
    randomLetter: __webpack_require__(19),
    randomNumber: __webpack_require__(20),
    randomSpecial: __webpack_require__(21),
    randomString: __webpack_require__(49),
    uuid: __webpack_require__(50)
};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

const randomFromArray = __webpack_require__(0);
const randomByCats = {
    chinese: __webpack_require__(17),
    japanese: __webpack_require__(18),
    letter: __webpack_require__(19),
    number: __webpack_require__(20),
    special: __webpack_require__(21)
};

module.exports = cats => {
    const cat = randomFromArray(cats);
    return randomByCats[cat]();
};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

const randomFromRange = __webpack_require__(3);

const range = {
    start: 0x4E00,
    end: 0x9FA5
};

module.exports = () => String.fromCharCode(randomFromRange(range.start, range.end));

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

const randomFromArray = __webpack_require__(0);
const randomFromRange = __webpack_require__(3);

const ranges = [{
    start: 0x3040,
    end: 0x309F
}, {
    start: 0x30A0,
    end: 0x30FF
}];

module.exports = () => {
    const range = randomFromArray(ranges);
    return String.fromCharCode(randomFromRange(range.start, range.end));
};

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {


const randomFromArray = __webpack_require__(0);

const letters = 'abcdefghijklmnopqrstuvwxyz'.split('');

module.exports = () => randomFromArray(letters);

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

const randomFromArray = __webpack_require__(0);

const numbers = '0123456789'.split('');

module.exports = () => randomFromArray(numbers);

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

const randomFromArray = __webpack_require__(0);

const specialChars = '!$%^&*()_+|~-=`{}[]:;<>?,./'.split('');

module.exports = () => randomFromArray(specialChars);

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

const isHorizontalDirection = __webpack_require__(36);
const edgeColor = __webpack_require__(4);

module.exports = (n, c, ctx, options, scale = 1) => {
  let beginNode = n;
  let endNode = c;
  const isHorizontal = isHorizontalDirection(options.direction);
  let beginP = beginNode.getAnchorPoint(beginNode.outAnchor);
  let endP = endNode.getAnchorPoint(endNode.inAnchor);
  if (isHorizontal && n.x > c.x || !isHorizontal && n.y > c.y) {
    beginNode = c;
    endNode = n;
    const tmp = beginP;
    beginP = endP;
    endP = tmp;
  }

  ctx.strokeStyle = edgeColor;
  ctx.beginPath();
  ctx.moveTo(beginP.x / scale, beginP.y / scale);
  if (isHorizontal) {
    ctx.bezierCurveTo((beginP.x + (beginNode.hgap + endNode.hgap) / 2) / scale, beginP.y / scale, (endP.x - (beginNode.hgap + endNode.hgap) / 2) / scale, endP.y / scale, endP.x / scale, endP.y / scale);
  } else {
    ctx.bezierCurveTo(beginP.x / scale, (beginP.y + (beginNode.vgap + endNode.vgap) / 2) / scale, endP.x / scale, (endP.y - (beginNode.vgap + endNode.vgap) / 2) / scale, endP.x / scale, endP.y / scale);
  }
  ctx.stroke();
};

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

const randomColor = __webpack_require__(37);

// const PEM = 18

module.exports = (node, ctx, scale = 1) => {
  // const origin = node.data
  const color = randomColor();
  // console.log(color.toRgba());
  const x = Math.round(node.x + node.hgap);
  const y = Math.round(node.y + node.vgap);
  const width = Math.round(node.width - node.hgap * 2);
  const height = Math.round(node.height - node.vgap * 2);
  // const x = Math.round(node.x)
  // const y = Math.round(node.y)
  // const width = Math.round(node.width)
  // const height = Math.round(node.height)
  // node
  ctx.clearRect(x / scale, y / scale, width / scale, height / scale);
  ctx.fillStyle = color.toString();
  ctx.fillRect(x / scale, y / scale, width / scale, height / scale);
  ctx.strokeStyle = color.toGrey().toString();
  ctx.strokeRect(x / scale, y / scale, width / scale, height / scale);
  // text
  // if (origin.isRoot) {
  //   ctx.font = `${PEM * 2 / scale}px Courier, monospace`
  // } else {
  //   ctx.font = `${PEM / scale}px Courier, monospace`
  // }
  // ctx.fillStyle = '#666'
  // ctx.fillText(origin.name, (x + PEM * 0.8) / scale, (y + (origin.isRoot ? PEM * 2 : PEM * 1)) / scale)
};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

const PEM = __webpack_require__(9);
const lineColor = __webpack_require__(4);
module.exports = (n, c, ctx, options, scale) => {
  /*
   * link in d3
   * `
   * M${c.x}     , ${c.y}
   * C${n.x + dx}, ${c.y}
   *  ${n.x + dx}, ${n.y}
   *  ${n.x}     , ${n.y}`
   */
  const beginP = n.getAnchorPoint(n.outAnchor);
  const endP = c.getAnchorPoint(c.inAnchor);
  const beginX = beginP.x;
  const beginY = beginP.y;
  const endX = endP.x;
  const endY = endP.y;
  const direction = options.direction || 'LR';
  // const dx = 100
  // const dx = endX - beginX
  // const dy = endY - beginY
  ctx.strokeStyle = lineColor;
  ctx.beginPath();
  ctx.moveTo(beginX / scale, beginY / scale);
  if (direction === 'LR') {
    ctx.bezierCurveTo((beginX + PEM) / scale, endY / scale, (beginX + PEM) / scale, endY / scale, endX / scale, endY / scale);
  } else if (direction === 'RL') {
    ctx.bezierCurveTo((beginX - PEM) / scale, endY / scale, (beginX - PEM) / scale, endY / scale, endX / scale, endY / scale);
  } else if (direction === 'TB') {
    ctx.bezierCurveTo(endX / scale, (beginY + PEM) / scale, endX / scale, (beginY + PEM) / scale, endX / scale, endY / scale);
  } else if (direction === 'BT') {
    ctx.bezierCurveTo(endX / scale, (beginY - PEM) / scale, endX / scale, (beginY - PEM) / scale, endX / scale, endY / scale);
  } else if (direction === 'H') {
    ctx.bezierCurveTo(beginX / scale, endY / scale, beginX / scale, endY / scale, endX / scale, endY / scale);
  } else if (direction === 'V') {
    ctx.bezierCurveTo(endX / scale, beginY / scale, endX / scale, beginY / scale, endX / scale, endY / scale);
  }
  ctx.stroke();
};

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

const lineColor = __webpack_require__(4);
module.exports = (n, c, ctx, options, scale) => {
  const beginP = n.getAnchorPoint(n.outAnchor);
  const endP = c.getAnchorPoint(c.inAnchor);
  const controlX = beginP.x;
  const controlY = endP.y;
  ctx.strokeStyle = lineColor;
  ctx.beginPath();
  ctx.moveTo(beginP.x / scale, beginP.y / scale);
  ctx.bezierCurveTo(controlX / scale, controlY / scale, controlX / scale, controlY / scale, endP.x / scale, endP.y / scale);
  ctx.stroke();
};

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

const LAYOUTS = __webpack_require__(5);
/*
 [
 'CompactBoxTree',
 'Dendrogram',
 'IndentedTree',
 'LayeredTidyTree',
 'LogicalMindmap',
 ]
 */
const DIRECTIONS = ['LR', 'RL', 'TB', 'BT', 'H', 'V'];

module.exports = layout => {
  let directions;
  if (layout === LAYOUTS[2]) {
    directions = [DIRECTIONS[0], DIRECTIONS[1], DIRECTIONS[4]];
  } else {
    directions = DIRECTIONS;
  }
  return `${directions.map(direction => `<option value="${direction}">${direction}</option>`).join('')}`;
};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

const LAYOUTS = __webpack_require__(5);

module.exports = `${LAYOUTS.map(layout => `<option value="${layout}">${layout}</option>`).join('')}`;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

const LAYOUTS = __webpack_require__(5);
/*
 [
 'CompactBoxTree',
 'Dendrogram',
 'IndentedTree',
 'LayeredTidyTree',
 'LogicalMindmap',
 ]
 */

function formItemsByMeta(arr) {
  return `${arr.map(item => {
    const props = Object.assign({
      min: 10,
      max: 200,
      value: 20
    }, item);
    return `<label class="form-label">${props.name}</label>
<input name="${props.name}" class="form-item" type="range"
 min="${props.min}" max="${props.max}" value="${props.value}"/>`;
  }).join('')}`;
}

module.exports = layout => {
  if (layout === LAYOUTS[0] || layout === LAYOUTS[4]) {
    return formItemsByMeta([{
      name: 'hgap'
    }, {
      name: 'vgap'
    }]);
  }
  if (layout === LAYOUTS[1]) {
    return formItemsByMeta([{
      name: 'nodeSep'
    }, {
      name: 'nodeSize'
    }, {
      name: 'rankSep',
      value: 200
    }, {
      name: 'subTreeSep'
    }]);
  }
  if (layout === LAYOUTS[2]) {
    return formItemsByMeta([{
      name: 'indent'
    }, {
      name: 'vgap',
      min: 0
    }]);
  }
  if (layout === LAYOUTS[3]) {
    return formItemsByMeta([{
      name: 'nodeSep'
    }, {
      name: 'nodeSize'
    }, {
      name: 'rankSep',
      value: 200
    }]);
  }
};

/***/ }),
/* 29 */
/***/ (function(module, exports) {

module.exports = (obj, key) => ({}).hasOwnProperty.call(obj, key);

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

const {
  randomTree
} = __webpack_require__(14);

module.exports = size => randomTree({
  size: size - 1,
  attributes: {
    id: {
      type: 'uuid'
    },
    name: {
      type: 'randomString',
      options: {
        length: 0,
        maxLength: 16,
        categories: ['japanese'
        // 'letter',
        // 'chinese',
        // 'special'
        ]
      }
    }
  }
});

/***/ }),
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */
/***/ (function(module, exports) {

// get successful control from form and assemble into object
// http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2

// types which indicate a submit action and are not successful controls
// these will be ignored
var k_r_submitter = /^(?:submit|button|image|reset|file)$/i;

// node names which could be successful controls
var k_r_success_contrls = /^(?:input|select|textarea|keygen)/i;

// Matches bracket notation.
var brackets = /(\[[^\[\]]*\])/g;

// serializes form fields
// @param form MUST be an HTMLForm element
// @param options is an optional argument to configure the serialization. Default output
// with no options specified is a url encoded string
//    - hash: [true | false] Configure the output type. If true, the output will
//    be a js object.
//    - serializer: [function] Optional serializer function to override the default one.
//    The function takes 3 arguments (result, key, value) and should return new result
//    hash and url encoded str serializers are provided with this module
//    - disabled: [true | false]. If true serialize disabled fields.
//    - empty: [true | false]. If true serialize empty fields
function serialize(form, options) {
    if (typeof options != 'object') {
        options = { hash: !!options };
    } else if (options.hash === undefined) {
        options.hash = true;
    }

    var result = options.hash ? {} : '';
    var serializer = options.serializer || (options.hash ? hash_serializer : str_serialize);

    var elements = form && form.elements ? form.elements : [];

    //Object store each radio and set if it's empty or not
    var radio_store = Object.create(null);

    for (var i = 0; i < elements.length; ++i) {
        var element = elements[i];

        // ingore disabled fields
        if (!options.disabled && element.disabled || !element.name) {
            continue;
        }
        // ignore anyhting that is not considered a success field
        if (!k_r_success_contrls.test(element.nodeName) || k_r_submitter.test(element.type)) {
            continue;
        }

        var key = element.name;
        var val = element.value;

        // we can't just use element.value for checkboxes cause some browsers lie to us
        // they say "on" for value when the box isn't checked
        if ((element.type === 'checkbox' || element.type === 'radio') && !element.checked) {
            val = undefined;
        }

        // If we want empty elements
        if (options.empty) {
            // for checkbox
            if (element.type === 'checkbox' && !element.checked) {
                val = '';
            }

            // for radio
            if (element.type === 'radio') {
                if (!radio_store[element.name] && !element.checked) {
                    radio_store[element.name] = false;
                } else if (element.checked) {
                    radio_store[element.name] = true;
                }
            }

            // if options empty is true, continue only if its radio
            if (!val && element.type == 'radio') {
                continue;
            }
        } else {
            // value-less fields are ignored unless options.empty is true
            if (!val) {
                continue;
            }
        }

        // multi select boxes
        if (element.type === 'select-multiple') {
            val = [];

            var selectOptions = element.options;
            var isSelectedOptions = false;
            for (var j = 0; j < selectOptions.length; ++j) {
                var option = selectOptions[j];
                var allowedEmpty = options.empty && !option.value;
                var hasValue = option.value || allowedEmpty;
                if (option.selected && hasValue) {
                    isSelectedOptions = true;

                    // If using a hash serializer be sure to add the
                    // correct notation for an array in the multi-select
                    // context. Here the name attribute on the select element
                    // might be missing the trailing bracket pair. Both names
                    // "foo" and "foo[]" should be arrays.
                    if (options.hash && key.slice(key.length - 2) !== '[]') {
                        result = serializer(result, key + '[]', option.value);
                    } else {
                        result = serializer(result, key, option.value);
                    }
                }
            }

            // Serialize if no selected options and options.empty is true
            if (!isSelectedOptions && options.empty) {
                result = serializer(result, key, '');
            }

            continue;
        }

        result = serializer(result, key, val);
    }

    // Check for all empty radio buttons and serialize them with key=""
    if (options.empty) {
        for (var key in radio_store) {
            if (!radio_store[key]) {
                result = serializer(result, key, '');
            }
        }
    }

    return result;
}

function parse_keys(string) {
    var keys = [];
    var prefix = /^([^\[\]]*)/;
    var children = new RegExp(brackets);
    var match = prefix.exec(string);

    if (match[1]) {
        keys.push(match[1]);
    }

    while ((match = children.exec(string)) !== null) {
        keys.push(match[1]);
    }

    return keys;
}

function hash_assign(result, keys, value) {
    if (keys.length === 0) {
        result = value;
        return result;
    }

    var key = keys.shift();
    var between = key.match(/^\[(.+?)\]$/);

    if (key === '[]') {
        result = result || [];

        if (Array.isArray(result)) {
            result.push(hash_assign(null, keys, value));
        } else {
            // This might be the result of bad name attributes like "[][foo]",
            // in this case the original `result` object will already be
            // assigned to an object literal. Rather than coerce the object to
            // an array, or cause an exception the attribute "_values" is
            // assigned as an array.
            result._values = result._values || [];
            result._values.push(hash_assign(null, keys, value));
        }

        return result;
    }

    // Key is an attribute name and can be assigned directly.
    if (!between) {
        result[key] = hash_assign(result[key], keys, value);
    } else {
        var string = between[1];
        // +var converts the variable into a number
        // better than parseInt because it doesn't truncate away trailing
        // letters and actually fails if whole thing is not a number
        var index = +string;

        // If the characters between the brackets is not a number it is an
        // attribute name and can be assigned directly.
        if (isNaN(index)) {
            result = result || {};
            result[string] = hash_assign(result[string], keys, value);
        } else {
            result = result || [];
            result[index] = hash_assign(result[index], keys, value);
        }
    }

    return result;
}

// Object/hash encoding serializer.
function hash_serializer(result, key, value) {
    var matches = key.match(brackets);

    // Has brackets? Use the recursive assignment function to walk the keys,
    // construct any missing objects in the result tree and make the assignment
    // at the end of the chain.
    if (matches) {
        var keys = parse_keys(key);
        hash_assign(result, keys, value);
    } else {
        // Non bracket notation can make assignments directly.
        var existing = result[key];

        // If the value has been assigned already (for instance when a radio and
        // a checkbox have the same name attribute) convert the previous value
        // into an array before pushing into it.
        //
        // NOTE: If this requirement were removed all hash creation and
        // assignment could go through `hash_assign`.
        if (existing) {
            if (!Array.isArray(existing)) {
                result[key] = [existing];
            }

            result[key].push(value);
        } else {
            result[key] = value;
        }
    }

    return result;
}

// urlform encoding serializer
function str_serialize(result, key, value) {
    // encode newlines as \r\n cause the html spec says so
    value = value.replace(/(\r)?\n/g, '\r\n');
    value = encodeURIComponent(value);

    // spaces should be '+' rather than '%20'.
    value = value.replace(/%20/g, '+');
    return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + value;
}

module.exports = serialize;

/***/ }),
/* 35 */
/***/ (function(module, exports) {

module.exports = ['LR', 'RL', 'H'];

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

const HORIZONTAL_DIRECTIONS = __webpack_require__(35);

module.exports = direction => HORIZONTAL_DIRECTIONS.indexOf(direction) > -1;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

const Color = __webpack_require__(51);
const {
  randomInt
} = __webpack_require__(14);

module.exports = () => {
  const rgba = `rgba(${randomInt(255)}, ${randomInt(255)}, ${randomInt(255)}, 0.6)`;
  return new Color(rgba);
};

/***/ }),
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

const utils = __webpack_require__(15);

function generateRoot(options) {
    const root = {
        children: []
    };
    const attributes = options.attributes;
    for (let key in attributes) {
        root[key] = utils[attributes[key].type](attributes[key].options);
    }
    return root;
}

function generateNode(root, child) {
    const rand = utils.randomInt(root.children.length);
    if (rand === root.children.length) {
        root.children.push(child);
    } else {
        generateNode(root.children[rand], child);
    }
}

const DEFAULT_OPTIONS = {
    size: 10,
    attributes: {
        id: {
            type: 'uuid'
        },
        name: {
            type: 'randomString',
            options: {
                maxLength: 10
            }
        }
    }
};

function randomTree(customizedOptions) {
    const options = Object.assign({}, DEFAULT_OPTIONS, customizedOptions);
    const root = generateRoot(options);
    for (let i = 0; i < options.size; i++) {
        generateNode(root, generateRoot(options));
    }
    return root;
}

module.exports = randomTree;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

const randomCharFromCats = __webpack_require__(16);
const randomFromRange = __webpack_require__(3);

const DEFAULT_OPTIONS = {
    length: 6,
    maxLength: 6,
    capitalization: 'lowercase', // lowercase, uppercase
    categories: [
    // 'number',
    'letter']
};

module.exports = customizedOptions => {
    const options = Object.assign({}, DEFAULT_OPTIONS, customizedOptions);
    let res = '';
    const len = options.length ? options.length : randomFromRange(1, options.maxLength);
    for (let i = 0; i < len; i++) {
        res += randomCharFromCats(options.categories);
    }
    if (options.capitalization === 'uppercase') {
        res = res.toUpperCase();
    }
    return res;
};

/***/ }),
/* 50 */
/***/ (function(module, exports) {

module.exports = () => 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
});

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

const namedColor = __webpack_require__(52);

const round = Math.round;

function isString(obj) {
  return typeof obj === 'string';
}
function lc(str) {
  return str.toLowerCase();
}

function confine(c, low, high) {
  c = Number(c);
  if (isFinite(c)) {
    if (c < low) {
      return low;
    }
    return c > high ? high : c;
  }
  return high;
}
function hue2rgb(m1, m2, h) {
  if (h < 0) {
    ++h;
  }
  if (h > 1) {
    --h;
  }
  const h6 = 6 * h;
  if (h6 < 1) {
    return m1 + (m2 - m1) * h6;
  }
  if (2 * h < 1) {
    return m2;
  }
  if (3 * h < 2) {
    return m1 + (m2 - m1) * (2 / 3 - h) * 6;
  }
  return m1;
}
function rgb2hsl(r, g, b, a) {
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  let h;
  let s;
  const l = (max + min) / 2;

  if (max === min) {
    h = s = 0;
  } else {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
      default:
        break;
    }
    h /= 6;
  }
  return [h, s, l, a];
}

class Color {
  // init props
  // r: 255,
  // g: 255,
  // b: 255,
  // a: 1,

  constructor( /* Array|String|Object */color) {
    let me = this;
    if (color) {
      if (isString(color)) {
        me = Color.fromString(color);
      } else if (Array.isArray(color)) {
        me = Color.fromArray(color, me);
      } else {
        me.set(color.r, color.g, color.b, color.a);
        if (!(color instanceof Color)) {
          me.sanitize();
        }
      }
    } else {
      me.set(255, 255, 255, 1);
    }
    return me;
  }

  set(r, g, b, a) {
    const me = this;
    me.r = r;
    me.g = g;
    me.b = b;
    me.a = a;
  }

  sanitize() {
    const me = this;
    me.r = round(confine(me.r, 0, 255));
    me.g = round(confine(me.g, 0, 255));
    me.b = round(confine(me.b, 0, 255));
    me.a = confine(me.a, 0, 1);
    return me;
  }

  toRgba() {
    const me = this;
    return [me.r, me.g, me.b, me.a];
  }

  toHsla() {
    const me = this;
    return rgb2hsl(me.r, me.g, me.b, me.a);
  }

  toHex() {
    const me = this;
    const arr = ['r', 'g', 'b'].map(x => {
      const str = me[x].toString(16);
      return str.length < 2 ? `0${str}` : str;
    });
    return `#${arr.join('')}`;
  }

  toCss( /* Boolean? */includeAlpha) {
    const me = this;
    const rgb = `${me.r},${me.g},${me.b}`;
    return includeAlpha ? `rgba(${rgb},${me.a})` : `rgb(${rgb})`;
  }

  toString() {
    return this.toCss(true);
  }

  toGrey() {
    const me = this;
    const g = round((me.r + me.g + me.b) / 3);
    return Color.makeGrey(g, me.a);
  }
}

Object.assign(Color, {
  hexByName: namedColor,

  makeGrey( /* Number */g, /* Number? */a) {
    return Color.fromArray([g, g, g, a]);
  },

  blendColors( /* Color */start, /* Color */end, /* Number */weight, /* Color? */obj) {
    const t = obj || new Color();
    ['r', 'g', 'b', 'a'].forEach(x => {
      t[x] = start[x] + (end[x] - start[x]) * weight;
      if (x !== 'a') {
        t[x] = Math.round(t[x]);
      }
    });
    return t.sanitize();
  },

  fromHex( /* String */color) {
    const result = new Color();
    const bits = color.length === 4 ? 4 : 8;
    const mask = (1 << bits) - 1;

    color = Number(`0x${color.substr(1)}`);

    if (isNaN(color)) {
      return null;
    }
    ['b', 'g', 'r'].forEach(x => {
      const c = color & mask;
      color >>= bits;
      result[x] = bits === 4 ? 17 * c : c;
    });
    return result;
  },
  fromRgb( /* String */color) {
    const matches = lc(color).match(/^rgba?\(([\s.,0-9]+)\)/);
    return matches && Color.fromArray(matches[1].split(/\s*,\s*/));
  },
  fromHsl( /* String */color) {
    const matches = lc(color).match(/^hsla?\(([\s.,0-9]+)\)/);
    if (matches) {
      const c = matches[2].split(/\s*,\s*/);
      const l = c.length;
      const H = (parseFloat(c[0]) % 360 + 360) % 360 / 360;
      const S = parseFloat(c[1]) / 100;
      const L = parseFloat(c[2]) / 100;
      const m2 = L <= 0.5 ? L * (S + 1) : L + S - L * S;
      const m1 = 2 * L - m2;
      const a = [hue2rgb(m1, m2, H + 1 / 3) * 256, hue2rgb(m1, m2, H) * 256, hue2rgb(m1, m2, H - 1 / 3) * 256, 1];
      if (l === 4) {
        a[3] = c[3];
      }
      return Color.fromArray(a);
    }
    return null;
  },
  fromArray( /* Array */arr) {
    const result = new Color();
    result.set(Number(arr[0]), Number(arr[1]), Number(arr[2]), Number(arr[3]));
    if (isNaN(result.a)) {
      result.a = 1;
    }
    return result.sanitize();
  },
  fromString( /* String */str) {
    const s = Color.hexByName[str];
    return s && Color.fromHex(s) || Color.fromRgb(str) || Color.fromHex(str) || Color.fromHsl(str);
  }
});

Color.named = Color.namedColor = namedColor;

module.exports = Color;

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = {
  aliceblue: '#f0f8ff',
  antiquewhite: '#faebd7',
  aqua: '#00ffff',
  aquamarine: '#7fffd4',
  azure: '#f0ffff',
  beige: '#f5f5dc',
  bisque: '#ffe4c4',
  black: '#000000',
  blanchedalmond: '#ffebcd',
  blue: '#0000ff',
  blueviolet: '#8a2be2',
  brown: '#a52a2a',
  burlywood: '#deb887',
  burntsienna: '#ea7e5d',
  cadetblue: '#5f9ea0',
  chartreuse: '#7fff00',
  chocolate: '#d2691e',
  coral: '#ff7f50',
  cornflowerblue: '#6495ed',
  cornsilk: '#fff8dc',
  crimson: '#dc143c',
  cyan: '#00ffff',
  darkblue: '#00008b',
  darkcyan: '#008b8b',
  darkgoldenrod: '#b8860b',
  darkgray: '#a9a9a9',
  darkgreen: '#006400',
  darkgrey: '#a9a9a9',
  darkkhaki: '#bdb76b',
  darkmagenta: '#8b008b',
  darkolivegreen: '#556b2f',
  darkorange: '#ff8c00',
  darkorchid: '#9932cc',
  darkred: '#8b0000',
  darksalmon: '#e9967a',
  darkseagreen: '#8fbc8f',
  darkslateblue: '#483d8b',
  darkslategray: '#2f4f4f',
  darkslategrey: '#2f4f4f',
  darkturquoise: '#00ced1',
  darkviolet: '#9400d3',
  deeppink: '#ff1493',
  deepskyblue: '#00bfff',
  dimgray: '#696969',
  dimgrey: '#696969',
  dodgerblue: '#1e90ff',
  firebrick: '#b22222',
  floralwhite: '#fffaf0',
  forestgreen: '#228b22',
  fuchsia: '#ff00ff',
  gainsboro: '#dcdcdc',
  ghostwhite: '#f8f8ff',
  gold: '#ffd700',
  goldenrod: '#daa520',
  gray: '#808080',
  green: '#008000',
  greenyellow: '#adff2f',
  grey: '#808080',
  honeydew: '#f0fff0',
  hotpink: '#ff69b4',
  indianred: '#cd5c5c',
  indigo: '#4b0082',
  ivory: '#fffff0',
  khaki: '#f0e68c',
  lavender: '#e6e6fa',
  lavenderblush: '#fff0f5',
  lawngreen: '#7cfc00',
  lemonchiffon: '#fffacd',
  lightblue: '#add8e6',
  lightcoral: '#f08080',
  lightcyan: '#e0ffff',
  lightgoldenrodyellow: '#fafad2',
  lightgray: '#d3d3d3',
  lightgreen: '#90ee90',
  lightgrey: '#d3d3d3',
  lightpink: '#ffb6c1',
  lightsalmon: '#ffa07a',
  lightseagreen: '#20b2aa',
  lightskyblue: '#87cefa',
  lightslategray: '#778899',
  lightslategrey: '#778899',
  lightsteelblue: '#b0c4de',
  lightyellow: '#ffffe0',
  lime: '#00ff00',
  limegreen: '#32cd32',
  linen: '#faf0e6',
  magenta: '#ff00ff',
  maroon: '#800000',
  mediumaquamarine: '#66cdaa',
  mediumblue: '#0000cd',
  mediumorchid: '#ba55d3',
  mediumpurple: '#9370db',
  mediumseagreen: '#3cb371',
  mediumslateblue: '#7b68ee',
  mediumspringgreen: '#00fa9a',
  mediumturquoise: '#48d1cc',
  mediumvioletred: '#c71585',
  midnightblue: '#191970',
  mintcream: '#f5fffa',
  mistyrose: '#ffe4e1',
  moccasin: '#ffe4b5',
  navajowhite: '#ffdead',
  navy: '#000080',
  oldlace: '#fdf5e6',
  olive: '#808000',
  olivedrab: '#6b8e23',
  orange: '#ffa500',
  orangered: '#ff4500',
  orchid: '#da70d6',
  palegoldenrod: '#eee8aa',
  palegreen: '#98fb98',
  paleturquoise: '#afeeee',
  palevioletred: '#db7093',
  papayawhip: '#ffefd5',
  peachpuff: '#ffdab9',
  peru: '#cd853f',
  pink: '#ffc0cb',
  plum: '#dda0dd',
  powderblue: '#b0e0e6',
  purple: '#800080',
  rebeccapurple: '#663399',
  red: '#ff0000',
  rosybrown: '#bc8f8f',
  royalblue: '#4169e1',
  saddlebrown: '#8b4513',
  salmon: '#fa8072',
  sandybrown: '#f4a460',
  seagreen: '#2e8b57',
  seashell: '#fff5ee',
  sienna: '#a0522d',
  silver: '#c0c0c0',
  skyblue: '#87ceeb',
  slateblue: '#6a5acd',
  slategray: '#708090',
  slategrey: '#708090',
  snow: '#fffafa',
  springgreen: '#00ff7f',
  steelblue: '#4682b4',
  tan: '#d2b48c',
  teal: '#008080',
  thistle: '#d8bfd8',
  tomato: '#ff6347',
  turquoise: '#40e0d0',
  violet: '#ee82ee',
  wheat: '#f5deb3',
  white: '#ffffff',
  whitesmoke: '#f5f5f5',
  yellow: '#ffff00',
  yellowgreen: '#9acd32'
};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

const serialize = __webpack_require__(34);
const randomTree = __webpack_require__(30);
const hasKey = __webpack_require__(29);
// TODO customize drawing methods
const renderCompactBox = __webpack_require__(23);
const renderCommonEdge = __webpack_require__(22);
const renderIndentedEdge = __webpack_require__(25);
const renderDendrogramEdge = __webpack_require__(24);
const tmplLayouts = __webpack_require__(27);
const tmplDirectionsByLayout = __webpack_require__(26);
const tmplPropsByLayout = __webpack_require__(28);
const PEM = __webpack_require__(9);

// dom elements
const $layoutProps = document.getElementById('layout-props');
const $layoutType = document.getElementById('layout-type');
const $direction = document.getElementById('direction');
const $propsContainer = document.getElementById('props-container');
const $canvasContainer = document.getElementById('canvas-container');
const $canvas = document.getElementById('canvas');
const $layoutTime = document.getElementById('layout-time');
const $renderTime = document.getElementById('render-time');
$layoutType.innerHTML = tmplLayouts;
$layoutType.onchange = renderDirectionsAndProps;
$layoutProps.onchange = render;
window.onresize = () => {
  setCanvasSize();
  render();
};

// fulfil props
function renderDirectionsAndProps() {
  const layout = $layoutType.value;
  $direction.innerHTML = tmplDirectionsByLayout(layout);
  $propsContainer.innerHTML = tmplPropsByLayout(layout);
}
function setCanvasSize() {
  $canvas.width = $canvasContainer.offsetWidth;
  $canvas.height = $canvasContainer.offsetHeight;
}

const diagram = window.diagram;
const ctx = $canvas.getContext('2d');

function getProps() {
  const props = serialize($layoutProps, {
    hash: true
  });
  for (let key in props) {
    const numeric = parseInt(props[key], 10);
    if (!isNaN(numeric)) {
      props[key] = numeric;
    }
  }
  return props;
}

// render graph
function render() {
  const options = getProps();
  const treeData = randomTree(options.treeSize);
  if (options.layoutType === 'LogicalMindmap') {
    Object.assign(treeData, {
      isRoot: true
    });
  }
  const Layout = diagram.layout[options.layoutType];
  const layout = new Layout(treeData, Object.assign({
    getHeight(d) {
      if (d.isRoot) {
        return PEM * 2.4;
      }
      return PEM * 1.2;
    },
    getWidth(d) {
      if (d.isRoot) {
        return ctx.measureText(d.name).width * 2 + PEM * 1.6;
      }
      return ctx.measureText(d.name).width + PEM * 1.6;
    },
    getHGap(d) {
      if (d.isRoot) {
        return (hasKey(options, 'hgap') ? options.hgap : PEM) * 2;
      }
      return (hasKey(options, 'hgap') ? options.hgap : PEM) / 2;
    },
    getVGap(d) {
      if (d.isRoot) {
        return (hasKey(options, 'vgap') ? options.vgap : PEM) * 2;
      }
      return (hasKey(options, 'vgap') ? options.vgap : PEM) / 2;
    }
  }, options));

  // console.log(options)

  const t0 = window.performance.now();

  const rootNode = layout.doLayout();

  console.log(rootNode);

  const t1 = window.performance.now();

  setCanvasSize();
  const bb = rootNode.getBoundingBox();
  bb.width += 4 * PEM;
  bb.height += 4 * PEM;
  rootNode.translate(2 * PEM, 2 * PEM);
  const scale = Math.max(bb.width / $canvas.width, bb.height / $canvas.height);
  $canvas.width = bb.width / scale;
  $canvas.height = bb.height / scale;

  let renderEdge = renderCommonEdge;
  if (options.layoutType === 'Dendrogram') {
    renderEdge = renderDendrogramEdge;
  }
  if (options.layoutType === 'IndentedTree') {
    renderEdge = renderIndentedEdge;
  }
  if (ctx) {
    ctx.clearRect(0, 0, $canvas.width, $canvas.height);
    rootNode.eachNode(node => {
      node.children.forEach(child => {
        renderEdge(node, child, ctx, options, scale);
      });
      renderCompactBox(node, ctx, scale);
    });
  }

  const t2 = window.performance.now();

  $layoutTime.innerHTML = Math.round(t1 - t0);
  $renderTime.innerHTML = Math.round(t2 - t1);
}

renderDirectionsAndProps();
setCanvasSize();
render();
module.exports = window.diagram;

/***/ })
/******/ ]);
});