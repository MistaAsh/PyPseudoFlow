(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["diagram"] = factory();
	else
		root["diagram"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 54);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

const Node = __webpack_require__(2);

class Layout {
  constructor(root, options = {}) {
    const me = this;
    me.root = new Node(root, options);
    me.options = options;
  }

  doLayout() {
    throw new Error('please override this method');
  }

  getNodes() {
    const me = this;
    const root = me.root;
    const options = me.options;
    const nodes = [];
    const extraNodes = options.extraNodes || [];
    // let countByDepth = {}
    root.eachNode(node => {
      // countByDepth[node.depth] = countByDepth[node.depth] || 0
      // countByDepth[node.depth]++
      nodes.push({
        // origin data
        data: node.data,
        id: node.id,
        // position
        x: node.x,
        y: node.y,
        centX: node.x + node.width / 2,
        centY: node.y + node.height / 2,
        // size
        hgap: node.hgap,
        vgap: node.vgap,
        height: node.height,
        width: node.width,
        actualHeight: node.height - node.vgap * 2,
        actualWidth: node.width - node.hgap * 2,
        // depth
        depth: node.depth,
        // anchors
        inAnchor: node.inAnchor,
        outAnchor: node.outAnchor,
        inAnchorPoint: node.getAnchorPoint(node.inAnchor),
        outAnchorPoint: node.getAnchorPoint(node.outAnchor)
      });
    });
    nodes.concat(extraNodes);
    return nodes;
  }

  getEdges() {
    const me = this;
    const options = me.options;
    const extraEdges = options.extraEdges;
    const root = this.root;
    const edges = [];
    root.eachNode(node => {
      node.children.forEach(child => {
        edges.push({
          source: node.id,
          target: child.id
        });
      });
    });
    edges.concat(extraEdges);
    return edges;
  }
}

module.exports = Layout;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

const PEM = __webpack_require__(39);
const DEFAULT_HEIGHT = PEM * 2;
const DEFAULT_GAP = PEM;

const DEFAULT_OPTIONS = {
  getId(d) {
    return d.id || d.name;
  },
  getHGap(d) {
    return d.hgap || DEFAULT_GAP;
  },
  getVGap(d) {
    return d.vgap || DEFAULT_GAP;
  },
  getChildren(d) {
    return d.children;
  },
  getHeight(d) {
    return d.height || DEFAULT_HEIGHT;
  },
  getWidth(d) {
    const name = d.name || ' ';
    return d.width || name.split('').length * PEM; // FIXME DO NOT get width like this
  }
};

class Node {
  constructor(data, options = {}, isolated) {
    const me = this;
    me.vgap = me.hgap = 0;
    if (data instanceof Node) return data;
    me.data = data;
    /*
     * Gaps: filling space between nodes
     * (x, y) ----------------------
     * |            hgap            |
     * |    --------------------    h
     * | v |                    |   e
     * | g |                    |   i
     * | a |                    |   g
     * | p |                    |   h
     * |   ---------------------    t
     * |                            |
     *  -----------width------------
     */
    const hgap = (options.getHGap || DEFAULT_OPTIONS.getHGap)(data);
    const vgap = (options.getVGap || DEFAULT_OPTIONS.getVGap)(data);
    /*
     * BBox: start point, width, height, etc.
     * (x, y) ---width--->| (x+width, y)
     *   |                |
     *  height            |
     *   |                |
     * (x, y+height)----->| (x+width, y+height)
     */
    me.width = (options.getWidth || DEFAULT_OPTIONS.getWidth)(data);
    me.height = (options.getHeight || DEFAULT_OPTIONS.getHeight)(data);
    me.id = (options.getId || DEFAULT_OPTIONS.getId)(data);
    me.x = me.y = 0;
    /*
     * Anchors: points that edges linked to
     * (0, 0) --------> (0, 1)
     *   |                |
     *   |   (0.5, 0.5)   |
     *   |                |
     * (0, 1) --------> (1, 1)
     */
    me.inAnchor = {
      x: 0,
      y: 0.5
    };
    me.outAnchor = {
      x: 1,
      y: 0.5
    };
    me.depth = 0;
    if (!isolated && !data.isCollapsed) {
      const nodes = [me];
      let node;
      while (node = nodes.pop()) {
        if (!node.data.isCollapsed) {
          const children = (options.getChildren || DEFAULT_OPTIONS.getChildren)(node.data);
          const length = children ? children.length : 0;
          node.children = [];
          if (children && length) {
            for (let i = 0; i < length; i++) {
              const child = new Node(children[i], options);
              node.children.push(child);
              nodes.push(child);
              child.parent = node;
              child.depth = node.depth + 1;
            }
          }
        }
      }
    }
    if (!me.children) {
      me.children = [];
    }
    me.addGap(hgap, vgap);
  }

  isRoot() {
    return this.depth === 0;
  }

  isLeaf() {
    return this.children.length === 0;
  }

  addGap(hgap, vgap) {
    const me = this;
    me.hgap += hgap;
    me.vgap += vgap;
    me.width += 2 * hgap;
    me.height += 2 * vgap;
  }

  eachNode(callback) {
    // depth first traverse
    const me = this;
    let nodes = [me];
    let current = null;
    while (current = nodes.pop()) {
      callback(current);
      nodes = nodes.concat(current.children);
    }
  }

  DFTraverse(callback) {
    // Depth First traverse
    this.eachNode(callback);
  }

  BFTraverse(callback) {
    // Breadth First traverse
    const me = this;
    let nodes = [me];
    let current = null;
    while (current = nodes.shift()) {
      callback(current);
      nodes = nodes.concat(current.children);
    }
  }

  getBoundingBox() {
    const bb = {
      left: Number.MAX_VALUE,
      top: Number.MAX_VALUE,
      width: 0,
      height: 0
    };
    this.eachNode(node => {
      bb.left = Math.min(bb.left, node.x);
      bb.top = Math.min(bb.top, node.y);
      bb.width = Math.max(bb.width, node.x + node.width);
      bb.height = Math.max(bb.height, node.y + node.height);
    });
    return bb;
  }

  // translate

  translate(tx = 0, ty = 0) {
    this.eachNode(node => {
      node.x += tx;
      node.y += ty;
    });
  }

  right2left() {
    const me = this;
    const bb = me.getBoundingBox();
    me.eachNode(node => {
      node.x = node.x - (node.x - bb.left) * 2 - node.width;
    });
    me.translate(bb.width, 0);
  }

  bottom2top() {
    const me = this;
    const bb = me.getBoundingBox();
    me.eachNode(node => {
      node.y = node.y - (node.y - bb.top) * 2 - node.height;
    });
    me.translate(0, bb.height);
  }

  getCenterX() {
    const me = this;
    return me.x + me.width / 2;
  }

  getCenterY() {
    const me = this;
    return me.y + me.height / 2;
  }

  getActualWidth() {
    const me = this;
    return me.width - me.hgap * 2;
  }

  getActualHeight() {
    const me = this;
    return me.height - me.vgap * 2;
  }

  getAnchorPoint(anchor) {
    const me = this;
    const width = me.getActualWidth();
    const height = me.getActualHeight();
    return {
      x: me.x + me.hgap + width * anchor.x,
      y: me.y + me.vgap + height * anchor.y
    };
  }
}

module.exports = Node;

/***/ }),
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */
/***/ (function(module, exports) {

// wrap tree node
class WrappedTree {
  constructor(w, h, y, c = []) {
    const me = this;
    // size
    me.w = w || 0;
    me.h = h || 0;

    // position
    me.y = y || 0;
    me.x = 0;

    // children
    me.c = c || [];
    me.cs = c.length;

    // modified
    me.prelim = 0;
    me.mod = 0;
    me.shift = 0;
    me.change = 0;

    // left/right tree
    me.tl = null;
    me.tr = null;

    // extreme left/right tree
    me.el = null;
    me.er = null;

    // modified left/right tree
    me.msel = 0;
    me.mser = 0;
  }
}
WrappedTree.fromNode = (root, isHorizontal) => {
  if (!root) return null;
  const children = [];
  root.children.forEach(child => {
    children.push(WrappedTree.fromNode(child, isHorizontal));
  });
  if (isHorizontal) return new WrappedTree(root.height, root.width, root.x, children);
  return new WrappedTree(root.width, root.height, root.y, children);
};

// node utils
function moveRight(node, move, isHorizontal) {
  if (isHorizontal) {
    node.y += move;
  } else {
    node.x += move;
  }
  node.children.forEach(child => {
    moveRight(child, move, isHorizontal);
  });
}

function getMin(node, isHorizontal) {
  let res = isHorizontal ? node.y : node.x;
  node.children.forEach(child => {
    res = Math.min(getMin(child, isHorizontal), res);
  });
  return res;
}

function normalize(node, isHorizontal) {
  const min = getMin(node, isHorizontal);
  moveRight(node, -min, isHorizontal);
}

function convertBack(converted /* WrappedTree */, root /* TreeNode */, isHorizontal) {
  if (isHorizontal) {
    root.y = converted.x;
  } else {
    root.x = converted.x;
  }
  converted.c.forEach((child, i) => {
    convertBack(child, root.children[i], isHorizontal);
  });
}

function layer(node, isHorizontal, d = 0) {
  if (isHorizontal) {
    node.x = d;
    d += node.width;
  } else {
    node.y = d;
    d += node.height;
  }
  node.children.forEach(child => {
    layer(child, isHorizontal, d);
  });
}

module.exports = (root, options = {}) => {
  const isHorizontal = options.isHorizontal;
  function firstWalk(t) {
    if (t.cs === 0) {
      setExtremes(t);
      return;
    }
    firstWalk(t.c[0]);
    let ih = updateIYL(bottom(t.c[0].el), 0, null);
    for (let i = 1; i < t.cs; ++i) {
      firstWalk(t.c[i]);
      const min = bottom(t.c[i].er);
      separate(t, i, ih);
      ih = updateIYL(min, i, ih);
    }
    positionRoot(t);
    setExtremes(t);
  }

  function setExtremes(t) {
    if (t.cs === 0) {
      t.el = t;
      t.er = t;
      t.msel = t.mser = 0;
    } else {
      t.el = t.c[0].el;
      t.msel = t.c[0].msel;
      t.er = t.c[t.cs - 1].er;
      t.mser = t.c[t.cs - 1].mser;
    }
  }

  function separate(t, i, ih) {
    let sr = t.c[i - 1];
    let mssr = sr.mod;
    let cl = t.c[i];
    let mscl = cl.mod;
    while (sr != null && cl != null) {
      if (bottom(sr) > ih.low) ih = ih.nxt;
      const dist = mssr + sr.prelim + sr.w - (mscl + cl.prelim);
      if (dist > 0) {
        mscl += dist;
        moveSubtree(t, i, ih.index, dist);
      }
      const sy = bottom(sr);
      const cy = bottom(cl);
      if (sy <= cy) {
        sr = nextRightContour(sr);
        if (sr != null) mssr += sr.mod;
      }
      if (sy >= cy) {
        cl = nextLeftContour(cl);
        if (cl != null) mscl += cl.mod;
      }
    }
    if (!sr && !!cl) {
      setLeftThread(t, i, cl, mscl);
    } else if (!!sr && !cl) {
      setRightThread(t, i, sr, mssr);
    }
  }

  function moveSubtree(t, i, si, dist) {
    t.c[i].mod += dist;
    t.c[i].msel += dist;
    t.c[i].mser += dist;
    distributeExtra(t, i, si, dist);
  }

  function nextLeftContour(t) {
    return t.cs === 0 ? t.tl : t.c[0];
  }

  function nextRightContour(t) {
    return t.cs === 0 ? t.tr : t.c[t.cs - 1];
  }

  function bottom(t) {
    return t.y + t.h;
  }

  function setLeftThread(t, i, cl, modsumcl) {
    const li = t.c[0].el;
    li.tl = cl;
    const diff = modsumcl - cl.mod - t.c[0].msel;
    li.mod += diff;
    li.prelim -= diff;
    t.c[0].el = t.c[i].el;
    t.c[0].msel = t.c[i].msel;
  }

  function setRightThread(t, i, sr, modsumsr) {
    const ri = t.c[i].er;
    ri.tr = sr;
    const diff = modsumsr - sr.mod - t.c[i].mser;
    ri.mod += diff;
    ri.prelim -= diff;
    t.c[i].er = t.c[i - 1].er;
    t.c[i].mser = t.c[i - 1].mser;
  }

  function positionRoot(t) {
    t.prelim = (t.c[0].prelim + t.c[0].mod + t.c[t.cs - 1].mod + t.c[t.cs - 1].prelim + t.c[t.cs - 1].w) / 2 - t.w / 2;
  }

  function secondWalk(t, modsum) {
    modsum += t.mod;
    t.x = t.prelim + modsum;
    addChildSpacing(t);
    for (let i = 0; i < t.cs; i++) {
      secondWalk(t.c[i], modsum);
    }
  }

  function distributeExtra(t, i, si, dist) {
    if (si !== i - 1) {
      const nr = i - si;
      t.c[si + 1].shift += dist / nr;
      t.c[i].shift -= dist / nr;
      t.c[i].change -= dist - dist / nr;
    }
  }

  function addChildSpacing(t) {
    let d = 0;
    let modsumdelta = 0;
    for (let i = 0; i < t.cs; i++) {
      d += t.c[i].shift;
      modsumdelta += d + t.c[i].change;
      t.c[i].mod += modsumdelta;
    }
  }

  function updateIYL(low, index, ih) {
    while (ih !== null && low >= ih.low) {
      ih = ih.nxt;
    }
    return {
      low,
      index,
      nxt: ih
    };
  }

  // do layout
  layer(root, isHorizontal);
  const wt = WrappedTree.fromNode(root, isHorizontal);
  // console.log(wt)
  firstWalk(wt);
  secondWalk(wt, 0);
  convertBack(wt, root, isHorizontal);
  normalize(root, isHorizontal);

  return root;
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

const VALID_DIRECTIONS = __webpack_require__(41);
const isHorizontal = __webpack_require__(47);
const setAnchors = __webpack_require__(13);
const separateTree = __webpack_require__(12);

const DEFAULT_DIRECTION = VALID_DIRECTIONS[0];

module.exports = (root, options, layoutAlgrithm) => {
  const direction = options.direction || DEFAULT_DIRECTION;
  options.isHorizontal = isHorizontal(direction);
  if (direction && VALID_DIRECTIONS.indexOf(direction) === -1) {
    throw new TypeError(`Invalid direction: ${direction}`);
  }

  if (direction === VALID_DIRECTIONS[0]) {
    // LR
    layoutAlgrithm(root, options);
    setAnchors(root, 'L', 'R');
  } else if (direction === VALID_DIRECTIONS[1]) {
    // RL
    layoutAlgrithm(root, options);
    root.right2left();
    // anchors
    setAnchors(root, 'R', 'L');
  } else if (direction === VALID_DIRECTIONS[2]) {
    // TB
    layoutAlgrithm(root, options);
    setAnchors(root, 'T', 'B');
  } else if (direction === VALID_DIRECTIONS[3]) {
    // BT
    layoutAlgrithm(root, options);
    root.bottom2top();
    setAnchors(root, 'B', 'T');
  } else if (direction === VALID_DIRECTIONS[4] || direction === VALID_DIRECTIONS[5]) {
    // H or V
    // separate into left and right trees
    const { left, right } = separateTree(root, options);
    // do layout for left and right trees
    layoutAlgrithm(left, options);
    layoutAlgrithm(right, options);
    if (options.isHorizontal) {
      setAnchors(left, 'R', 'L');
      setAnchors(right, 'L', 'R');
    } else {
      setAnchors(left, 'B', 'T');
      setAnchors(right, 'T', 'B');
    }
    options.isHorizontal ? left.right2left() : left.bottom2top();
    // combine left and right trees
    right.translate(left.x - right.x, left.y - right.y);
    // translate root
    root.x = left.x;
    root.y = right.y;
    setAnchors(root, 'C', 'C', true);
    const bb = root.getBoundingBox();
    if (options.isHorizontal) {
      if (bb.top < 0) {
        root.translate(0, -bb.top);
      }
    } else {
      if (bb.left < 0) {
        root.translate(-bb.left, 0);
      }
    }
  }
  return root;
};

/***/ }),
/* 8 */,
/* 9 */,
/* 10 */
/***/ (function(module, exports) {

// wrap tree node
// TODO considering size
class WrappedTree {
  constructor(height, children = []) {
    const me = this;
    me.x = me.y = 0;
    me.leftChild = me.rightChild = null;
    me.height = height || 0;
    me.children = children;
  }
}

const DEFAULT_OPTIONS = {
  isHorizontal: true,
  nodeSep: 20,
  nodeSize: 20,
  rankSep: 200,
  subTreeSep: 10
};

function convertBack(converted /* WrappedTree */, root /* TreeNode */, isHorizontal) {
  if (isHorizontal) {
    root.x = converted.x;
    root.y = converted.y;
  } else {
    root.x = converted.y;
    root.y = converted.x;
  }
  converted.children.forEach((child, i) => {
    convertBack(child, root.children[i], isHorizontal);
  });
}

module.exports = (root, options = {}) => {
  options = Object.assign({}, DEFAULT_OPTIONS, options);

  let maxDepth = 0;
  function wrappedTreeFromNode(n) {
    if (!n) return null;
    n.width = 0;
    if (n.depth && n.depth > maxDepth) {
      maxDepth = n.depth; // get the max depth
    }
    const children = n.children;
    const childrenCount = children.length;
    const t = new WrappedTree(n.height, []);
    children.forEach((child, i) => {
      const childWT = wrappedTreeFromNode(child);
      t.children.push(childWT);
      if (i === 0) {
        // t.leftChild = childWT.leftChild ? childWT.leftChild : childWT
        t.leftChild = childWT;
      }
      if (i === childrenCount - 1) {
        // t.rightChild = childWT.rightChild ? childWT.rightChild : childWT
        t.rightChild = childWT;
      }
    });
    t.originNode = n;
    t.isLeaf = n.isLeaf();
    return t;
  }

  function getDrawingDepth(t) {
    if (t.isLeaf || t.children.length === 0) {
      t.drawingDepth = maxDepth;
    } else {
      const depths = t.children.map(child => {
        return getDrawingDepth(child);
      });
      const minChildDepth = Math.min.apply(null, depths);
      t.drawingDepth = minChildDepth - 1;
    }
    return t.drawingDepth;
  }

  let prevLeaf;

  function position(t) {
    t.x = t.drawingDepth * options.rankSep;
    if (t.isLeaf) {
      t.y = 0;
      if (prevLeaf) {
        t.y = prevLeaf.y + prevLeaf.height + options.nodeSep;
        if (t.originNode.parent !== prevLeaf.originNode.parent) {
          t.y += options.subTreeSep;
        }
      }
      prevLeaf = t;
    } else {
      t.children.forEach(child => {
        position(child);
      });
      t.y = (t.leftChild.y + t.rightChild.y) / 2;
    }
  }

  // wrap node
  const wt = wrappedTreeFromNode(root);
  // get depth for drawing
  getDrawingDepth(wt);
  // get position
  position(wt);
  // get x, y
  convertBack(wt, root, options.isHorizontal);
  return root;
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

const TreeLayout = __webpack_require__(1);
const nonLayeredTidyTree = __webpack_require__(6);
const doTreeLayout = __webpack_require__(7);

class CompactBoxTreeLayout extends TreeLayout {
  doLayout() {
    const me = this;
    const root = me.root;
    const options = me.options;
    doTreeLayout(root, options, nonLayeredTidyTree);
    return root;
  }
}

module.exports = CompactBoxTreeLayout;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

const Node = __webpack_require__(2);

module.exports = (root, options) => {
  // separate into left and right trees
  const left = new Node(root.data, options, true); // root only
  const right = new Node(root.data, options, true); // root only
  // automatically
  // TODO separate left and right tree by meta data
  const treeSize = root.children.length;
  const rightTreeSize = Math.round(treeSize / 2);
  for (let i = 0; i < treeSize; i++) {
    const child = root.children[i];
    if (i < rightTreeSize) {
      right.children.push(child);
    } else {
      left.children.push(child);
    }
  }
  return {
    left,
    right
  };
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

const ANCHORS_BY_DIRECTION = __webpack_require__(40);

function setAnchors(node, d1, d2) {
  node.inAnchor = ANCHORS_BY_DIRECTION[d1];
  node.outAnchor = ANCHORS_BY_DIRECTION[d2];
}

module.exports = (root, d1, d2, single) => {
  if (single) {
    setAnchors(root, d1, d2);
  } else {
    root.eachNode(node => {
      setAnchors(node, d1, d2);
    });
  }
};

/***/ }),
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  dendrogram: __webpack_require__(10),
  nonLayeredTidyTree: __webpack_require__(6)
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Node: __webpack_require__(2)
};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  CompactBoxTree: __webpack_require__(11),
  Dendrogram: __webpack_require__(44),
  IndentedTree: __webpack_require__(45),
  LayeredTidyTree: __webpack_require__(46),
  LogicalMindmap: __webpack_require__(43),
  TreeLayout: __webpack_require__(1)
};

/***/ }),
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */
/***/ (function(module, exports) {

const DEFAULT_INDENT = 20;
function positionNode(node, previousNode, dx) {
  node.x += dx * node.depth;
  node.y = previousNode ? previousNode.y + previousNode.height : 0;
}
module.exports = (root, indent = DEFAULT_INDENT) => {
  let previousNode = null;
  root.eachNode(node => {
    positionNode(node, previousNode, indent);
    previousNode = node;
  });
};

/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = 18;

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = {
  T: { // center of top border
    x: 0.5,
    y: 0
  },
  R: { // center of right border
    x: 1,
    y: 0.5
  },
  B: { // center of bottom border
    x: 0.5,
    y: 1
  },
  L: { // center of left border
    x: 0,
    y: 0.5
  },
  C: { // center of shape
    x: 0.5,
    y: 0.5
  }
};

/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = ['LR', // left to right
'RL', // right to left
'TB', // top to bottom
'BT', // bottom to top
'H', // horizontal
'V' // vertical
];

/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = ['LR', // left to right
'RL', // right to left
'H' // horizontal
];

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(11);

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

const TreeLayout = __webpack_require__(1);
const dendrogram = __webpack_require__(10);
const doTreeLayout = __webpack_require__(7);

class DendrogramLayout extends TreeLayout {
  doLayout() {
    const me = this;
    const root = me.root;
    const options = me.options;
    root.width = 0;
    doTreeLayout(root, options, dendrogram);
    return root;
  }
}

module.exports = DendrogramLayout;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

const TreeLayout = __webpack_require__(1);
const indentedTree = __webpack_require__(38);
const setAnchors = __webpack_require__(13);
const separateTree = __webpack_require__(12);

const VALID_DIRECTIONS = ['LR', // left to right
'RL', // right to left
'H' // horizontal
];
const DEFAULT_DIRECTION = VALID_DIRECTIONS[0];

class IndentedTreeLayout extends TreeLayout {
  doLayout() {
    const me = this;
    const root = me.root;
    const options = me.options;
    const indent = options.indent;
    const direction = options.direction || DEFAULT_DIRECTION;
    if (direction && VALID_DIRECTIONS.indexOf(direction) === -1) {
      throw new TypeError(`Invalid direction: ${direction}`);
    }
    if (direction === VALID_DIRECTIONS[0]) {
      // LR
      indentedTree(root, indent);
      setAnchors(root, 'L', 'L');
    } else if (direction === VALID_DIRECTIONS[1]) {
      // RL
      indentedTree(root, indent);
      root.right2left();
      setAnchors(root, 'R', 'R');
    } else if (direction === VALID_DIRECTIONS[2]) {
      // H
      // separate into left and right trees
      const { left, right } = separateTree(root, options);
      indentedTree(left, indent);
      left.right2left();
      setAnchors(left, 'R', 'R');
      indentedTree(right, indent);
      setAnchors(right, 'L', 'L');
      const bbox = left.getBoundingBox();
      right.translate(bbox.width, 0);
      root.x = right.x - root.width / 2;
      setAnchors(root, 'B', 'B', true);
    }
    return root;
  }
}

module.exports = IndentedTreeLayout;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

const Node = __webpack_require__(2);
const TreeLayout = __webpack_require__(1);
const nonLayeredTidyTree = __webpack_require__(6);
const doTreeLayout = __webpack_require__(7);

const DEFAULT_OPTIONS = {
  nodeSize: 20,
  nodeSep: 20,
  rankSep: 200
  /*
   * TODO handle width, height, hgap, vgap, etc.
   */
};

class CompactBoxTreeLayout extends TreeLayout {
  constructor(root, options = {}) {
    super(root, options);
    const me = this;
    const size = options.nodeSize || DEFAULT_OPTIONS.nodeSize;
    const nodeSep = options.nodeSep || DEFAULT_OPTIONS.nodeSep;
    const rankSep = options.rankSep || DEFAULT_OPTIONS.rankSep;
    me.root = new Node(root, Object.assign(options, {
      getWidth() {
        return size;
      },
      getHeight() {
        return size;
      },
      getHGap() {
        return rankSep;
      },
      getVGap() {
        return nodeSep;
      }
    }));
    me.options = options;
  }

  doLayout() {
    const me = this;
    const root = me.root;
    const options = Object.assign({}, DEFAULT_OPTIONS, me.options);
    doTreeLayout(root, options, nonLayeredTidyTree);
    return root;
  }
}

module.exports = CompactBoxTreeLayout;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

const treeHorizontalDirections = __webpack_require__(42);

module.exports = direction => treeHorizontalDirections.indexOf(direction) > -1;

/***/ }),
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  algorithm: __webpack_require__(31),
  hierarchy: __webpack_require__(32),
  layout: __webpack_require__(33)
};

/***/ })
/******/ ]);
});