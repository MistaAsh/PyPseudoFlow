const VALID_DIRECTIONS = require('../constant/tree-common-directions')
const isHorizontal = require('../util/is-horizontal-tree-direction')
const setAnchors = require('../util/set-tree-anchors')
const separateTree = require('../util/separate-tree')

const DEFAULT_DIRECTION = VALID_DIRECTIONS[0]

module.exports = (root, options, layoutAlgrithm) => {
  const direction = options.direction || DEFAULT_DIRECTION
  options.isHorizontal = isHorizontal(direction)
  if (direction && VALID_DIRECTIONS.indexOf(direction) === -1) {
    throw new TypeError(`Invalid direction: ${direction}`)
  }

  if (direction === VALID_DIRECTIONS[0]) {
    // LR
    layoutAlgrithm(root, options)
    setAnchors(root, 'L', 'R')
  } else if (direction === VALID_DIRECTIONS[1]) {
    // RL
    layoutAlgrithm(root, options)
    root.right2left()
    // anchors
    setAnchors(root, 'R', 'L')
  } else if (direction === VALID_DIRECTIONS[2]) {
    // TB
    layoutAlgrithm(root, options)
    setAnchors(root, 'T', 'B')
  } else if (direction === VALID_DIRECTIONS[3]) {
    // BT
    layoutAlgrithm(root, options)
    root.bottom2top()
    setAnchors(root, 'B', 'T')
  } else if (direction === VALID_DIRECTIONS[4] || direction === VALID_DIRECTIONS[5]) {
    // H or V
    // separate into left and right trees
    const {left, right} = separateTree(root, options)
    // do layout for left and right trees
    layoutAlgrithm(left, options)
    layoutAlgrithm(right, options)
    if (options.isHorizontal) {
      setAnchors(left, 'R', 'L')
      setAnchors(right, 'L', 'R')
    } else {
      setAnchors(left, 'B', 'T')
      setAnchors(right, 'T', 'B')
    }
    options.isHorizontal ? (left.right2left()) : (left.bottom2top())
    // combine left and right trees
    right.translate(left.x - right.x, left.y - right.y)
    // translate root
    root.x = left.x
    root.y = right.y
    setAnchors(root, 'C', 'C', true)
    const bb = root.getBoundingBox()
    if (options.isHorizontal) {
      if (bb.top < 0) {
        root.translate(0, -bb.top)
      }
    } else {
      if (bb.left < 0) {
        root.translate(-bb.left, 0)
      }
    }
  }
  return root
}
