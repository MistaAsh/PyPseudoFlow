const Node = require('../hierarchy/node')
const TreeLayout = require('./tree-layout-base')
const nonLayeredTidyTree = require('../algorithm/non-layered-tidy-tree')
const doTreeLayout = require('./do-tree-layout')

const DEFAULT_OPTIONS = {
  nodeSize: 20,
  nodeSep: 20,
  rankSep: 200
  /*
   * TODO handle width, height, hgap, vgap, etc.
   */
}

class CompactBoxTreeLayout extends TreeLayout {
  constructor (root, options = {}) {
    super(root, options)
    const me = this
    const size = options.nodeSize || DEFAULT_OPTIONS.nodeSize
    const nodeSep = options.nodeSep || DEFAULT_OPTIONS.nodeSep
    const rankSep = options.rankSep || DEFAULT_OPTIONS.rankSep
    me.root = new Node(root, Object.assign(options, {
      getWidth () {
        return size
      },
      getHeight () {
        return size
      },
      getHGap () {
        return rankSep
      },
      getVGap () {
        return nodeSep
      }
    }))
    me.options = options
  }

  doLayout () {
    const me = this
    const root = me.root
    const options = Object.assign({}, DEFAULT_OPTIONS, me.options)
    doTreeLayout(root, options, nonLayeredTidyTree)
    return root
  }
}

module.exports = CompactBoxTreeLayout
