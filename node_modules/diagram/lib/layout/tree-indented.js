const TreeLayout = require('./tree-layout-base')
const indentedTree = require('../algorithm/indented-tree')
const setAnchors = require('../util/set-tree-anchors')
const separateTree = require('../util/separate-tree')

const VALID_DIRECTIONS = [
  'LR', // left to right
  'RL', // right to left
  'H' // horizontal
]
const DEFAULT_DIRECTION = VALID_DIRECTIONS[0]

class IndentedTreeLayout extends TreeLayout {
  doLayout () {
    const me = this
    const root = me.root
    const options = me.options
    const indent = options.indent
    const direction = options.direction || DEFAULT_DIRECTION
    if (direction && VALID_DIRECTIONS.indexOf(direction) === -1) {
      throw new TypeError(`Invalid direction: ${direction}`)
    }
    if (direction === VALID_DIRECTIONS[0]) { // LR
      indentedTree(root, indent)
      setAnchors(root, 'L', 'L')
    } else if (direction === VALID_DIRECTIONS[1]) { // RL
      indentedTree(root, indent)
      root.right2left()
      setAnchors(root, 'R', 'R')
    } else if (direction === VALID_DIRECTIONS[2]) { // H
      // separate into left and right trees
      const {left, right} = separateTree(root, options)
      indentedTree(left, indent)
      left.right2left()
      setAnchors(left, 'R', 'R')
      indentedTree(right, indent)
      setAnchors(right, 'L', 'L')
      const bbox = left.getBoundingBox()
      right.translate(bbox.width, 0)
      root.x = right.x - root.width / 2
      setAnchors(root, 'B', 'B', true)
    }
    return root
  }
}

module.exports = IndentedTreeLayout
